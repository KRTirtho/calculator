{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["style","fontSize","App","props","state","currentNumber","decimalFlag","operatorFlag","minusFlag","handleClick","bind","e","buttonName","target","value","this","isMinusZeroInIndex","replaceTwice","substring","length","replacer","slice","eval","setState","className","autoComplete","type","id","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5408363.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nconst style={\n  fontSize: \"30px\"\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      currentNumber: '0',\n      decimalFlag: false,\n      operatorFlag: false,\n      minusFlag: false\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\nhandleClick(e){\n  let buttonName = e.target.value\n  let {currentNumber, operatorFlag, decimalFlag, minusFlag, isMinusZeroInIndex} = this.state\n  switch(true){\n      case buttonName === \"0\" ||\n           buttonName === \"1\" ||\n           buttonName === \"2\" ||\n           buttonName === \"3\" ||\n           buttonName === \"4\" ||\n           buttonName === \"5\" ||\n           buttonName === \"6\" ||\n           buttonName === \"7\" ||\n           buttonName === \"8\" ||\n           buttonName === \"9\" :\n      if(this.state.currentNumber!==\"0\"){\n      currentNumber += buttonName\n      operatorFlag = false\n      minusFlag = false\n      }else{\n      currentNumber = buttonName\n      minusFlag = false\n      }\n         break\n    case buttonName === \"+\" ||\n         buttonName === \"*\" ||\n         buttonName === \"/\" :\n         if(!this.state.operatorFlag){\n          currentNumber += buttonName\n          operatorFlag = true\n          decimalFlag = false\n        }\n        else if(this.state.minusFlag === true){\n          let replaceTwice = currentNumber.substring(0, currentNumber.length-2)\n          currentNumber = replaceTwice;\n          currentNumber += buttonName;\n          minusFlag = false\n        }\n         else{\n           let replacer = currentNumber.slice(0, currentNumber.length-1);\n           currentNumber = replacer;\n           currentNumber += buttonName\n         }\n         break\n    case buttonName === '-':\n       if(currentNumber === \"0\"){\n        currentNumber = buttonName\n        decimalFlag = false;\n      }\n      else if(!minusFlag && currentNumber !== \"0\"){\n        currentNumber += buttonName\n        minusFlag = true;\n        decimalFlag = false\n      }\n         break \n    case buttonName === \".\":\n         if(!this.state.decimalFlag){    //Triggering the Value Of Decimal if Decimal is false then append it to \n          currentNumber += buttonName;    //the Display or current Number & soon after that make it true so  it will \n          decimalFlag = true; //not get added after clicking it for the first timeðŸ˜ŽðŸ˜Ž \n         }\n         break\n    case buttonName === \"clear\":\n         currentNumber = '0'\n         operatorFlag = false;\n         minusFlag = false;\n         decimalFlag = false\n         style.fontSize = \"30px\"\n         break     \n    case buttonName === '=':\n         currentNumber = eval(this.state.currentNumber)\n         operatorFlag = false;\n         decimalFlag = true;\n         minusFlag = false;\n         if(currentNumber.length < 9){style.fontSize = \"30px\"};\n         break\n    case buttonName === 'delete':\n         if(currentNumber !== eval(this.state.currentNumber) && currentNumber !== \"0\" && currentNumber !== '+' && currentNumber !=='-' && currentNumber !== '/' && currentNumber !=='*'){\n            currentNumber = currentNumber.substring(0, currentNumber.length-1)\n         }\n  }\n  this.setState({decimalFlag})\n  this.setState({operatorFlag})\n  this.setState({minusFlag})\n  this.setState({currentNumber})\n}\n\n  render(){\n\n\n    if(this.state.currentNumber.length > 9){\n      style.fontSize = \"20px\"\n    }\n\n    return (\n      <div className=\"bg\">\n      <div className=\"wrapper\">\n\n        \n\n        <input autoComplete={false} style={{fontSize: style.fontSize}} type=\"text\" id=\"display\" value={this.state.currentNumber}/>\n       \n\n        <div className=\"gridContainer\">\n\n        <button id=\"clear\" value=\"clear\" onClick={this.handleClick} className=\"operator\">AC</button>\n\n        <button id=\"divide\" value=\"/\" onClick={this.handleClick} className=\"number logic\">/</button>\n\n        <button id=\"multiply\" value=\"*\" onClick={this.handleClick} className=\"number logic\">x</button>\n\n        <br/>\n\n        <button id=\"seven\" value=\"7\" onClick={this.handleClick} className=\"number\">7</button>\n\n        <button id=\"eight\" value=\"8\" onClick={this.handleClick} className=\"number\">8</button>\n\n        <button id=\"nine\" value=\"9\" onClick={this.handleClick} className=\"number\">9</button>\n\n        <button id=\"subtract\" value=\"-\" onClick={this.handleClick} className=\"number logic\">-</button>\n\n        <br/>\n\n        <button id=\"four\" value=\"4\" onClick={this.handleClick} className=\"number\">4</button>\n\n        <button id=\"five\" value=\"5\" onClick={this.handleClick} className=\"number\">5</button>\n\n        <button id=\"six\" value=\"6\" onClick={this.handleClick} className=\"number\">6</button>\n\n        <button id=\"add\" value=\"+\" onClick={this.handleClick} className=\"number logic\">+</button>\n\n        <br/>\n\n        <button id=\"one\" value=\"1\" onClick={this.handleClick} className=\"number\">1</button>\n\n        <button id=\"two\" value=\"2\" onClick={this.handleClick} className=\"number\">2</button>\n\n        <button id=\"three\" value=\"3\" onClick={this.handleClick} className=\"number\">3</button>\n\n        <button id=\"backspace\"  value=\"delete\" onClick={this.handleClick} className=\"number logic\">C</button>\n\n        <br/>\n\n        <button id=\"zero\" value=\"0\" onClick={this.handleClick} className=\"operator\">0</button>\n        \n        <button id=\"decimal\" value=\".\" onClick={this.handleClick} className=\"number\">.</button>\n\n        <button id=\"equals\" value=\"=\" onClick={this.handleClick} className=\"number\">=</button>\n\n\n          </div>        \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}